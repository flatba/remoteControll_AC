/*
 * 赤外線送信プログラム
 * sendRawの出力：D3 
 * 参考：http://blog.hawksnowlog.cf/2017/01/control-infrared-with-arduino.html
 */

#include <boarddefs.h>
#include <ir_Lego_PF_BitStreamEncoder.h>
#include <IRremote.h>
#include <IRremoteInt.h>
#include <OneWire.h>
#include <DallasTemperature.h>

int ON = 7;
int khz = 38;

// Data output is plugged into port 3 on the Arduino
IRsend irsend;

// Data wire is plugged into port 2 on the Arduino
#define ONE_WIRE_BUS 2
// Setup a oneWire instance to communicate with any OneWire devices (not just Maxim/Dallas temperature ICs)
OneWire oneWire(ONE_WIRE_BUS);
// Pass our oneWire reference to Dallas Temperature. 
DallasTemperature sensors(&oneWire);

void setup() { 
  // start serial port
  Serial.begin(9600);
  Serial.println("Program is Started");
  pinMode(ON, INPUT);

  // Start up the library
  sensors.begin();
}

void loop() {

  Serial.print("Temperature for the device 1 (index 0) is: ");
  sensors.requestTemperatures(); // Send the command to get temperatures
  int tempertures = sensors.getTempCByIndex(0);
  Serial.println(tempertures);

  if(tempertures > 28) { // 電源ON
    
    Serial.println("ON");
    unsigned int irSignal_AC_ON[532] = {3348,1684,452,1232,432,412,452,388,456,388,432,412,428,412,456,388,456,388,452,388,432,412,452,388,432,412,456,1228,456,388,428,416,452,388,432,412,428,416,452,388,456,388,428,416,428,412,452,392,452,388,432,412,432,412,456,384,456,388,452,392,448,392,456,1228,432,412,456,1228,432,1252,456,1232,448,1236,456,1228,432,1252,432,412,432,1252,456,1232,428,1256,428,1256,456,1228,432,1256,428,1256,428,1256,432,1252,456,388,452,392,428,412,432,412,428,416,428,412,432,412,432,412,452,388,456,388,428,1256,452,1232,452,392,452,392,452,1232,452,1232,452,1232,456,1232,428,412,456,388,428,1256,432,1252,456,388,452,392,452,1232,452,392,452,1232,452,392,452,388,432,1252,432,412,428,1256,456,388,452,1232,456,388,452,1232,428,1256,432,412,432,1252,456,388,428,1256,456,1228,432,412,452,392,452,1232,428,416,452,388,432,412,428,416,452,388,452,1232,456,1228,456,388,456,1228,456,1232,452,1232,428,416,428,416,452,388,452,1232,456,388,452,1232,452,1232,456,388,428,1256,452,1232,456,1232,452,388,432,1256,452,388,432,412,428,1256,456,388,428,416,452,388,456,388,428,412,432,412,452,392,452,388,452,1232,456,1232,452,1232,456,1228,432,1252,432,1256,452,1232,432,1252,432,412,432,412,428,412,432,412,452,392,428,412,456,388,452,392,452,1232,428,1256,428,1256,432,1252,456,1232,428,1256,452,1232,432,1256,428,412,428,416,428,416,428,412,428,416,428,412,432,412,428,416,452,1232,428,1256,428,1256,432,1256,428,1256,428,1256,428,1256,432,1256,428,416,424,416,428,416,428,412,428,416,428,416,428,412,428,416,428,1256,428,1256,428,1256,428,1260,428,1256,428,1256,428,1256,428,1260,428,416,424,416,428,416,428,416,424,416,428,416,428,412,428,416,428,1256,428,1256,428,1260,424,1260,428,1256,428,1256,428,1260,424,1260,428,1256,428,1256,428,416,428,416,428,416,424,416,428,1256,428,416,428,416,424,416,428,1256,428,1260,428,1256,428,1256,428,416,428,1256,428,1256,428,416,428,416,428,412,428,1256,428,416,428,1256,428,1260,428,412,428,1260,428,1256,428,1256,428,416,428,1256,428,416,428,412,428,416,428,416,428,412,428,416,428,1256,428,1256,428,416,428,416,428,1256,428,1256,428,1256,428,1260,428,412,428,416,428,1256,428,1256,428,416,428,416,428,412,428,416,428,416,428,412,428,416,428,416,424,1260,428,1256,428,1256,428,1256,432,1256,428,1256,428,1256,428,1256,432};
    irsend.sendRaw(irSignal_AC_ON, sizeof(irSignal_AC_ON) / sizeof(irSignal_AC_ON[0]), khz);

  }else if(tempertures < 25) { // 電源OFF
    
    Serial.println("OFF");
    unsigned int irSignal_AC_OFF[532] = {3348,1680,424,1260,428,416,424,420,424,416,428,416,424,416,428,416,424,420,452,388,428,416,424,420,424,416,452,1232,428,416,424,420,424,420,424,416,424,420,424,416,424,420,424,420,424,416,424,420,424,420,424,416,424,420,424,420,424,416,424,420,424,416,428,1260,424,416,424,1260,428,1256,428,1260,424,1260,428,1256,428,1260,424,416,424,1260,428,1260,424,1260,428,1256,424,1264,424,1260,424,1260,424,1260,428,1256,428,416,428,416,424,420,424,416,424,420,424,420,424,416,424,420,424,416,428,416,424,1260,428,1256,428,416,428,416,424,1260,424,1260,428,1256,428,1260,424,416,424,420,428,1256,428,1256,428,416,424,420,424,1260,424,420,424,1260,424,420,424,416,424,1260,428,416,428,1256,428,416,424,1264,424,416,424,1260,428,1256,428,416,424,1260,428,416,424,1260,428,1256,428,416,428,416,424,1260,428,416,424,416,424,420,424,420,424,416,424,1260,428,1260,424,416,428,1256,428,1260,424,1260,424,420,424,416,428,416,424,1260,428,416,428,1256,424,1260,428,416,424,1260,428,1256,428,1260,424,420,424,1260,424,416,424,420,424,1260,428,416,424,420,424,416,428,416,424,416,428,416,428,416,424,416,428,1256,428,1260,424,1260,424,1260,428,1256,428,1260,424,1264,420,1260,428,416,424,420,424,416,428,416,424,420,424,416,428,416,424,416,428,1260,424,1260,424,1260,428,1256,428,1260,424,1260,424,1260,428,1256,428,416,428,416,424,416,428,416,424,420,424,416,428,416,428,416,424,1260,424,1260,424,1260,428,1256,428,1260,424,1260,428,1256,428,1256,428,420,424,416,424,420,424,416,428,416,424,420,424,416,428,416,424,1260,424,1260,428,1256,428,1256,428,1260,428,1256,428,1256,428,1260,424,420,424,416,424,420,424,416,428,420,424,416,424,416,428,416,424,1260,424,1260,428,1256,428,1260,424,1260,428,1256,428,1256,428,1260,424,1260,424,1260,428,416,428,416,424,416,428,416,424,1260,428,416,424,416,428,416,424,1260,428,1256,428,1260,424,1260,424,420,424,1260,424,1260,424,420,424,420,424,416,428,416,424,420,424,1256,428,1260,424,420,424,1260,424,1260,424,1260,428,1256,428,1260,424,420,424,416,424,420,424,420,420,420,424,420,424,1260,424,1260,424,420,424,416,428,1256,428,1260,424,1260,424,1260,428,416,424,420,424,1260,424,1260,424,420,424,420,424,416,424,420,424,416,428,416,424,420,424,416,424,1260,428,1260,424,1260,424,1260,424,1260,428,1260,424,1260,424,1260,424};
    irsend.sendRaw(irSignal_AC_OFF, sizeof(irSignal_AC_OFF) / sizeof(irSignal_AC_OFF[0]), khz);
    
  }
  
}
